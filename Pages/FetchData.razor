@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using YoghurtBank.Data
@using YoghurtBank.Controllers
@using YoghurtBank.Data.Model
@inject WeatherForecastService ForecastService
@inject CollaborationRequestController cuntroller

<h1>Your collaborationrequests</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
    <h1>@requests</h1>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Application</th>
                <th>Status</th>
                <th>StudentID</th>
                <th>SupervisorID</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in requests)
            {
                <tr>
                    <td>@request.Application</td>
                    <td>@request.Status</td>
                    <td>@request.StudentId</td>
                    <td>@request.SupervisorId</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    
    private WeatherForecast[]? forecasts;
    private IReadOnlyCollection<CollaborationRequestDetailsDTO> requests;

    protected override async Task OnInitializedAsync()
    {
        var cb1 = new CollaborationRequestDetailsDTO
        {
            StudentId = 1,
            SupervisorId = 2,
            Application = "Din fars bil",
            Status = CollaborationRequestStatus.Waiting
        };
        var cb2 = new CollaborationRequestDetailsDTO
        {
            StudentId = 3,
            SupervisorId = 4,
            Application = "Not Science",
            Status = CollaborationRequestStatus.Waiting
        };
        //requests = new List<CollaborationRequestDetailsDTO> { cb1, cb2}.AsReadOnly();
        requests = await cuntroller.Get();
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }
    
}
