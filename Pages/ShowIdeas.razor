@page "/user/ideas"
@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider auth

<PageTitle>My ideas</PageTitle>

@if(ideas == null || ideas.Length == 0)
{
    <h1>You have no ideas - get creatin'!</h1>
}
else 
{
     <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Subject</th>
                <th>Description</th>
                <th>Posted date</th>
                <th>Amount of collaborators</th>
                <th>Open</th>
                <th>Duration</th>
                <th>Start date</th>
                <th>Type</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var idea in ideas)
            {
                <tr>
                    <td>@idea.Title</td>
                    <td>@idea.Subject</td>
                    <td>@idea.Posted</td>
                    <td>@idea.Description</td>
                    <td>@idea.AmountOfCollaborators</td>
                    <td>@idea.Open</td>
                    <td>@idea.TimeToComplete</td>
                    <td>@idea.StartDate</td>
                    <td>@idea.Type</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    public int? userId; //neccessary?
    private IdeaDetailsDTO[]? ideas;
    private User user;
    private string Name;


    protected override async Task OnInitializedAsync()
    {
        //her skal være noget logik som finder ideer frem baseret på
        //hvem der er logget ind? 
        //Name = await auth.GetAuthenticationStateAsync().User.Identity.Name; 
        //user = await api-kald-der-finder-bruger-baseret-på-navn/mail?
        
        //pt. er den sat til at finde de forkerte ideer! 
        ideas = await Http.GetFromJsonAsync<IdeaDetailsDTO[]>($"https://localhost:7194/api/idea");
    }
}